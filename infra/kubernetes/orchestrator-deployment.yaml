apiVersion: apps/v1
kind: Deployment
metadata:
  name: atheon-orchestrator
  labels:
    app: atheon-orchestrator
spec:
  replicas: 2
  selector:
    matchLabels:
      app: atheon-orchestrator
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: atheon-orchestrator
    spec:
      containers:
      - name: orchestrator
        image: ghcr.io/atheon-ai/orchestrator:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        # Using the Doppler Kubernetes Operator
        envFrom:
        - secretRef:
            name: doppler-env-vars
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      imagePullSecrets:
      - name: github-registry
---
apiVersion: v1
kind: Service
metadata:
  name: atheon-orchestrator
spec:
  selector:
    app: atheon-orchestrator
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: atheon-orchestrator
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.atheon.ai
    secretName: atheon-api-tls
  rules:
  - host: api.atheon.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atheon-orchestrator
            port:
              number: 8000