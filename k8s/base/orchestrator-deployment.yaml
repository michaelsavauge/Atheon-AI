apiVersion: apps/v1
kind: Deployment
metadata:
  name: orchestrator
  namespace: atheon-ai
  labels:
    app: orchestrator
    component: vertical-agent
spec:
  replicas: 2
  selector:
    matchLabels:
      app: orchestrator
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: orchestrator
        component: vertical-agent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: orchestrator
        image: ${DOCKER_REGISTRY}/atheon-orchestrator:${VERSION}
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: atheon-secrets
              key: database-url
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: atheon-secrets
              key: jwt-secret
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: atheon-secrets
              key: openai-api-key
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: atheon-secrets
              key: anthropic-api-key
        - name: HUGGINGFACE_API_KEY
          valueFrom:
            secretKeyRef:
              name: atheon-secrets
              key: huggingface-api-key
        - name: LOG_LEVEL
          value: "info"
        - name: REDIS_URL
          value: "redis://redis:6379/0"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: orchestrator
  namespace: atheon-ai
  labels:
    app: orchestrator
spec:
  selector:
    app: orchestrator
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  type: ClusterIP