apiVersion: apps/v1
kind: Deployment
metadata:
  name: scraper
  labels:
    app: scraper
    component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: scraper
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: scraper
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/metrics"
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: scraper
        image: ${REGISTRY_URL}/atheon-ai/scraper:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8082
          name: http
        - containerPort: 8083
          name: metrics
        resources:
          limits:
            cpu: "1"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: atheon-config
              key: LOG_LEVEL
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: atheon-config
              key: ENVIRONMENT
        # Kafka configuration
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        # Agent specific configuration
        - name: MAX_CONCURRENT_JOBS
          value: "10"
        - name: TIMEOUT_SECONDS
          value: "30"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: config-volume
        configMap:
          name: app-config
          items:
          - key: agent-config.yaml
            path: config.yaml
      - name: tmp-volume
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000