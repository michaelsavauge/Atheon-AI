name: Orchestrator CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/orchestrator/**'
      - '.github/workflows/orchestrator-ci-cd.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/orchestrator/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      version:
        description: 'Version to deploy (for production)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/orchestrator
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          cd backend/orchestrator
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Lint with flake8
        run: |
          cd backend/orchestrator
          poetry run flake8 src tests

      - name: Type check with mypy
        run: |
          cd backend/orchestrator
          poetry run mypy src

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          cd backend/orchestrator
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Run tests
        run: |
          cd backend/orchestrator
          poetry run pytest tests --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/orchestrator/coverage.xml
          flags: orchestrator
          fail_ci_if_error: true

  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ github.event.inputs.version }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./backend/orchestrator
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1

      - name: Configure Doppler
        run: |
          doppler setup --token ${{ secrets.DOPPLER_TOKEN }} --no-prompt

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBECONFIG_DEV }}

      - name: Deploy to Kubernetes
        run: |
          export REGISTRY_URL=${{ env.REGISTRY }}/${{ github.repository }}
          export IMAGE_TAG=sha-$(echo ${{ github.sha }} | cut -c1-7)

          # Apply kustomize overlay
          kubectl apply -k k8s/overlays/development

          # Wait for deployment to complete
          kubectl rollout status deployment/dev-orchestrator -n atheon-ai-dev --timeout=180s

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1

      - name: Configure Doppler
        run: |
          doppler setup --token ${{ secrets.DOPPLER_TOKEN }} --no-prompt

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBECONFIG_STAGING }}

      - name: Deploy to Kubernetes
        run: |
          export REGISTRY_URL=${{ env.REGISTRY }}/${{ github.repository }}
          export STAGING_TAG=sha-$(echo ${{ github.sha }} | cut -c1-7)

          # Apply kustomize overlay
          kubectl apply -k k8s/overlays/staging

          # Wait for deployment to complete
          kubectl rollout status deployment/staging-orchestrator -n atheon-ai-staging --timeout=180s

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1

      - name: Configure Doppler
        run: |
          doppler setup --token ${{ secrets.DOPPLER_TOKEN }} --no-prompt

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBECONFIG_PROD }}

      - name: Deploy to Kubernetes
        run: |
          export REGISTRY_URL=${{ env.REGISTRY }}/${{ github.repository }}
          export RELEASE_VERSION=${{ github.event.inputs.version || 'latest' }}

          # Apply kustomize overlay
          kubectl apply -k k8s/overlays/production

          # Wait for deployment to complete
          kubectl rollout status deployment/prod-orchestrator -n atheon-ai-prod --timeout=300s